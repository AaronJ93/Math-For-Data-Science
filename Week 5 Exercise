import math
import numpy as np
import matplotlib.pyplot as plt

# Define the function f(x)
def f(x):
    return np.sqrt(4 - x**2)

# Right Riemann sum function
def right_riemann_sum(f, a, b, n):
    delta_x = (b - a) / n
    total = 0
    for k in range(1, n + 1):
        x_k = a + k * delta_x
        total += f(x_k) * delta_x
    return total

# Plot the function and Riemann rectangles
def plot_riemann_right(f, a, b, n):
    x = np.linspace(a, b, 1000)
    y = f(x)
    delta_x = (b - a) / n
    x_rects = np.linspace(a + delta_x, b, n)
    heights = f(x_rects)

    plt.figure(figsize=(8, 5))
    plt.plot(x, y, label="f(x) = √(4 - x²)", color="blue")
    for i in range(n):
        xi = a + (i + 1) * delta_x
        plt.bar(xi, heights[i], width=delta_x, align='edge', color='orange', edgecolor='black', alpha=0.6)

    plt.title(f"Right Riemann Sum Approximation (n={n})")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.legend()
    plt.grid(True)
    plt.show()

# Main section
a = 0
b = 2
n_values = [4, 10, 100, 1000, 10000]

# Print all Rn values
print("Right Riemann Sum Approximations for f(x) = √(4 - x²) on [0, 2]:")
for n in n_values:
    result = right_riemann_sum(f, a, b, n)
    print(f"R{n} = {result:.6f}")

# Plot just one of them visually (e.g., R4)
plot_riemann_right(f, a, b, 4)

# Exact area from geometry (quarter circle with radius 2)
exact_area = math.pi
print(f"\nExact area (¼ of π·r² with r=2): {exact_area:.6f}")
